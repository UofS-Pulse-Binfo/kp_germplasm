<?php

module_load_include('inc', 'germplasm_manage', 'administration');
module_load_include('inc', 'germplasm_manage', 'register_crosses_form');
module_load_include('inc', 'germplasm_manage', 'parents_form');
module_load_include('inc', 'germplasm_manage', 'generate_pedigree');
//module_load_include('inc', 'germplasm_manage', 'crossing_block');

////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_menu
 * Purpose: Add menu items pertaining to this module
 *
 * @return an array of menu definitions
 */
function germplasm_manage_menu() {
  $items = array();

	$items['admin/tripal/germplasm'] = array(
		'title' => t('Germplasm'),
		'page callback' => 'germplasm_manage_description_page',
		'access arguments' => array('administer site configuration'),
	);

	$items['admin/tripal/germplasm/configuration'] = array(
		'title' => t('Configuration'),
		'page callback' => 'germplasm_manage_admin_page',
		'access arguments' => array('administer site configuration'),
	);

  $items['node/add/germplasm'] = array(
    'title' => t('Generic Germplasm'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('germplasm_form'),
    'access arguments' => array('create chado_stock content'),
  );

  $items['node/add/crosses'] = array(
    'title' => t('Bulk Registration of Crosses'),
    'page callback' => 'germplasm_manage_register_crosses_page',
    'access arguments' => array('create chado_stock content'),
  );

  $items['node/add/crossingblock_parents'] = array(
    'title' => t('Add Parents for Crossing Block'),
    'page callback' => 'assign_crossing_parents_page',
    'access arguments' => array('create chado_stock content'),
  );

  $items['Crossing_Blocks'] = array(
  	'title' => t('Crossing Blocks'),
  	'page callback' => 'all_crossing_block_summary_page',
  	'access arguments' => array('access chado_stock content'),
  );

  $items['Crossing_Block/%organism_common_name/%cb_year/%cb_season/Summary'] = array(
  	'title' => t('Crossing Block Summary'),
  	'page callback' => 'crossing_block_summary',
  	'page arguments' => array(1,2,3),
    'access arguments' => array('access chado_stock content'),
  );

  $items['germplasm/generate_pedigree'] = array(
  	'title' => t('Generate Pedigree'),
  	'page callback' => 'drupal_get_form',
  	'page arguments' => array('germplasm_manage_generate_pedigree_form'),
    'access arguments' => array('access chado_stock content'),
  );

  return $items;
}

/**
 * Implements hook_theme
 * Purpose: To register any theme functions for this module
 *
 * @return an array of theme definitions
 */
function germplasm_manage_theme() {
  $themes = array();

  $themes['set_crossing_block_form'] = array(
      'arguments' => array('form'),
      'function' => 'theme_set_crossing_block_form'
  );

  $themes['bulk_register_crosses_form'] = array(
      'arguments' => array('form'),
      'function' => 'theme_bulk_register_crosses_form'
  );

  $themes['create_parent_alias_for_existing_stock_form'] = array(
      'arguments' => array('form'),
      'function' => 'theme_create_parent_alias_for_existing_stock_form',
  );

  $themes['germplasm_manage_pedigree'] = array(
      'arguments' => array('node' => NULL),
      'template' => 'germplasm_theme/germplasm_manage_pedigree',
  );

  $themes['germplasm_manage_pedigree_jsarray'] = array(
    'arguments' => array('pedigree_array'=>NULL),
    'function' => 'theme_germplasm_manage_pedigree_jsarray',
  );

  $themes['germplasm_manage_pedigree_drawing'] = array(
    'arguments' => array('pedigree'=>NULL),
    'template' => 'germplasm_theme/germplasm_manage_pedigree_drawing',
  );

  $themes['germplasm_manage_generate_pedigree_on_node_form'] = array(
    'arguments' => array('form'),
    'function' => 'theme_germplasm_manage_generate_pedigree_on_node_form',
  );

  $themes['crossing_block'] = array(
  	'arguments' => array('element' => NULL)
  );

  return $themes;
}

/**
 * Implements hook_views_api()
 * Purpose: Essentially this hook tells drupal that there is views support for
 *  for this module which then includes germplasm_management.views.inc where all the
 *  views integration code is
 */
function germplasm_manage_views_api() {
   return array(
      'api' => 2.0,
   );
}

/**
 * Defines an argument for the menu system
 */
function organism_common_name_to_arg ($arg, $map, $index) {
	return $arg;
}
function cb_year_to_arg ($arg, $map, $index) {
	return $arg;
}
function cb_season_to_arg ($arg, $map, $index) {
	return $arg;
}

/**
 * Implements hook_nodeapi
 * Allows this module to add content to any node
 */
function germplasm_manage_nodeapi (&$node, $op, $a3 = NULL, $a4 = NULL) {

	// Add content to the stock nodes
	switch ($op) {
		case 'view':
			if ($node->type == 'chado_stock') {
				$node->content['germplasm_manage_pedigree'] = array(
					'#value' => theme('germplasm_manage_pedigree', $node),
					'#weight' => 8
				);
			break;
		}
	}
}

/**
 * Implements hook_block
 * Allows this module to add drupal blocks
 */
function germplasm_manage_block ($op = 'list', $delta = 0, $edit=array()) {
  switch($op) {
    case 'list':

      $blocks['pedigree']['info'] = t('Germplasm Pedigree');
      $blocks['pedigree']['cache'] = BLOCK_NO_CACHE;

 		case 'view':
 			if(user_access('access chado_stock content') and arg(0) == 'node' and is_numeric(arg(1))) {
      	$nid = arg(1);
      	$node = node_load($nid);

        $block = array();
        switch($delta){
					case 'pedigree':
						$block['subject'] = t('Germplasm Pedigree');
						$block['content'] = theme('germplasm_manage_pedigree',$node);
						break;
				}
			}
	}

	return ($block) ? $block : $blocks;
}

////////////////////////////////////////////////////////////////////////////
// @section create crossingblock form element
////////////////////////////////////////////////////////////////////////////

/**
 * Adds the new type of form element to the form API
 */
function germplasm_manage_elements() {
	return array(
		'crossing_block' => array(
     	'#input' => TRUE,
     	'#process' => array('crossing_block_form_element'),
     	'#element_validate' => array('crossing_block_form_element_validate'),
  	),
  	'height' => array(
     	'#input' => TRUE,
     	'#process' => array('expand_height'),
     	'#element_validate' => array('height_validate'),
  	),
  );
}

/**
 * Defines the crossing_block form element
 * Specifically the parts of the form element and any defaults, etc.
 */
function crossing_block_form_element ($element) {
	// Assigning default values to element. You can override these values by passing your own values using "#default_value".
	if (empty($element['#value'])) {
		$element['#value'] = array(
			'year' => '<ANY>',
			'season' => '<ANY>',
		);
  }

  // create form elements
	$element['#tree'] = TRUE;

	$parents = $element['#parents'];
	$parents[] = 'year';
	$element['year'] = array(
		'#type' => 'select',
		'#default_value' => $element['#value']['year'],
		'#options' => $element['#options']['year'],
		'#prefix' => t('Year:'),
	);

	$parents = $element['#parents'];
  $parents[] = 'season';
  $element['season'] = array(
		'#type' => 'select',
		'#default_value' => $element['#value']['season'],
		'#options' => $element['#options']['season'],
		'#prefix' => t('Season:'),
  );

  // Assign default options to the form element
  if (empty($element['#options'])) {

  	$stock_prop_types_cv_id = variable_get('chado_stock_prop_types_cv', '');
    if ($stock_prop_types_cv_id) {
			$cb_year_cvterm = tripal_core_chado_select(
        'cvterm',
        array('cvterm_id'),
        array(
          'name' => 'crossingblock_year',
          'cv_id' => $stock_prop_types_cv_id
        )
      );
			if ($cb_year_cvterm[0]->cvterm_id) {
				$previous_db = db_set_active('chado');
				$resource = db_query("SELECT value FROM stockprop WHERE type_id=".$cb_year_cvterm[0]->cvterm_id." ORDER BY value");
				db_set_active($previous_db);
				$year_options = array(''=>'Any');
				while ($r = db_fetch_object($resource)) {
					$year_options[$r->value] = $r->value;
				}
			} else {
				$year_options = array('<NONE>'=>'None');
			}

			$cb_season_cvterm = tripal_core_chado_select(
        'cvterm',
        array('cvterm_id'),
        array(
          'name' => 'crossingblock_season',
          'cv_id' => $stock_prop_types_cv_id
        )
      );
			if ($cb_season_cvterm[0]->cvterm_id) {
				$previous_db = db_set_active('chado');
				$resource = db_query("SELECT value FROM stockprop WHERE type_id=".$cb_season_cvterm[0]->cvterm_id." ORDER BY value");
				db_set_active($previous_db);
				$season_options = array(''=>'Any');
				while ($r = db_fetch_object($resource)) {
					$season_options[$r->value] = $r->value;
				}
			} else {
				$season_options = array('<NONE>'=>'None');
			}
		} else {
			$year_options = array('<NONE>'=>'None');
			$season_options = array('<NONE>'=>'None');
		}

		$element['season']['#options'] = $season_options;
		$element['year']['#options'] = $year_options;
  }

	return $element;
}

/**
 * Validation of the crossing_block form element
 */
function crossing_block_form_element_validate ($element) {  }

/**
 * Theme the crossing_block form element
 * Draws the children form elements inline
 */
function theme_crossing_block ($element) {
  	return theme('form_element', $element, '<div class="container-inline">'. $element['#children'] .'</div>');
}

////////////////////////////////////////////////////////////////////////////
// @section alter node form
// Purpose: To remove the primary db accession from the form and set it
//   automatically to KP:GERM\d+
////////////////////////////////////////////////////////////////////////////

/**
 * The Germplasm Node Form
 * Note: This form essentially hijacks the chado_stock node form
 */
function germplasm_form ($form_state) {

  $form = chado_stock_form($node, array());

  $form['names']['uniquename']['#type'] = 'hidden';
  $form['names']['uniquename']['#default_value'] = time();

  $form['database_reference']['#collapsible'] = TRUE;
  $form['database_reference']['#collapsed'] = TRUE;

  $form['database_reference']['accession']['#disabled'] = TRUE;
  $form['database_reference']['db_description']['#disabled'] = TRUE;
  $form['database_reference']['db_description']['#default_value'] = 'This Database Reference is set automatically. It is used as the accession for the current database and will follow the form KP:GERM followed by a number.';
  $form['database_reference']['database']['#disabled'] = TRUE;

	$user->height = array('feet' => '5', 'inch' => '8');
	// Create element of 'type' height
	$form['height'] = array(
		'#type' => 'height',
		'#title' => t('Height'),
		'#required' => TRUE,
		'#default_value' => isset($user->height) ? $user->height : array('feet' => '-', 'inch' => '-'),
	);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save'
  );

  return $form;
}

/**
 * Germplasm Node Form Submit
 * Note: This submit programatically creates the stock node by executing the chado_stock node form
 */
function germplasm_form_submit($form, $form_state) {
global $user;

  //create main stock node by submitting form
  $node = array(
        'uid' => (string) $user->uid,
        'name' => (string) $user->name,
        'type' => 'chado_stock',
        'language' => '',
        'title' => $form_state['values']['title'],
        'uniquename' => $form_state['values']['title'],
        'type_id' => $form_state['values']['type_id'],
        'organism_id' => $form_state['values']['organism_id'],
        'stock_description' => $form_state['values']['stock_description'],
        'simulate_multipart' => TRUE,
  );

  $node_form_state = array(
      'values' => array(
        'type_id' => $form_state['values']['type_id'],
        'organism_id' => $form_state['values']['organism_id'],
        'uniquename' => $form_state['values']['title'],
        'title' => $form_state['values']['title'],
        'stock_description' => $form_state['values']['stock_description'],
        'simulate_multipart' => TRUE,
        'op' => 'Save'
      ),
  );
  module_load_include('inc', 'node', 'node.pages');
  $errors = drupal_execute('chado_stock_node_form', $node_form_state, (object)$node);
  drupal_set_message(print_r($errors, TRUE), 'error');
  $node = node_load($node_form_state['nid']);

  // Create Main Db reference------------------------------------------------------
  $uniquename = variable_get( 'germplasm_prefix', 'GERM:') . $node->stock->stock_id;
  $insert_values = array(
    'accession' => $uniquename,
    'db_id' => variable_get('tripal_stock_main_dbxref_db', 0),
    'version' => 1
  );
  $success = tripal_core_chado_insert('dbxref', $insert_values);

  if ($success) {
    // Update name/title = uniquename-----------------------------------------------
    $update_values = array(
      'uniquename' => $uniquename,
      'dbxref_id' => array(
        'accession' => $uniquename,
        'db_id' => variable_get('tripal_stock_main_dbxref_db', 0)
      )
    );
    $select_values = array('stock_id' => $node->stock->stock_id);
    $success = tripal_core_chado_update('stock', $select_values, $update_values);
    if ($success) {
      drupal_set_message('Successfully Added Main Database Reference');
    } else {
      drupal_set_message('Unable to attach main database reference!', 'error');
    }
  } else {
    drupal_set_message('Unable to add main database reference!', 'error');
  }
}

////////////////////////////////////////////////////////////////////////////
// @section crossing block summary page
// Purpose: Summarizes a given Crossing Block
////////////////////////////////////////////////////////////////////////////

/**
 * Purpose: To provide a simple summary of a crossing block (number of parents/progeny)
 *  and link to views providing further details
 */
function crossing_block_summary ($organism_genus, $cb_year, $cb_season) {
	$output = '';

	$output .= '<br />';
	$output .= '<table>';
	$output .= '<tr><th>Organism</th><td>'.$organism_genus.'</td></tr>';
	$output .= '<tr><th>Crossing Block Year</th><td>'.$cb_year.'</td></tr>';
	$output .= '<tr><th>Crossing Block Season</th><td>'.$cb_season.'</td></tr>';

	// Summary of Parents-------------------------------------------
	//synonym prefix
	if (preg_match('/[Ss]ummer/', $cb_season)) { $synonym_prefix = 'Sm'.$cb_year.'-P'; }
  if (preg_match('/[Ff]all/', $cb_season)) { $synonym_prefix = 'F'.$cb_year.'-P'; }
  if (preg_match('/[Ww]inter/', $cb_season)) { $synonym_prefix = 'W'.$cb_year.'-P'; }
  if (preg_match('/[Ss]pring/', $cb_season)) { $synonym_prefix = 'Sp'.$cb_year.'-P'; }

	// synonym type id
	$cvterm = tripal_core_chado_select(
	  'cvterm',
	  array('cvterm_id'),
	  array(
	    'name' => 'synonym',
	    'cv_id' => variable_get('chado_stock_prop_types_cv', 'null')
	  )
	);

	// count number of parents
	$query = "SELECT count(*) as count FROM stock stock "
						."LEFT JOIN organism organism ON stock.organism_id = organism.organism_id "
						."WHERE (stock.stock_id IN (SELECT stockprop.stock_id FROM stockprop WHERE stockprop.type_id=".$cvterm[0]->cvterm_id." AND stockprop.value~'".$synonym_prefix."')) "
						."AND (organism.genus = '".$organism_genus."') ";
	$previous_db = tripal_db_set_active('chado');
	$r = db_fetch_object(db_query($query));
	tripal_db_set_active($previous_db);

	// summary variables
	$num_parents = $r->count;
	$parent_view_link = l('more', 'Crossing_Block/'.$organism_genus.'/'.$cb_year.'/'.$cb_season.'/Parents');
	$parent_add_link = l('add', 'node/add/crossingblock_parents');
	$output .= '<tr><th>Parents</th><td>'.$num_parents.' parents ('.$parent_view_link.', '.$parent_add_link.')</td></tr>';

	// Summary of Progeny-----------------------------

	// get type ids
	$cb_year_cvterm = tripal_core_chado_select(
	  'cvterm',
	  array('cvterm_id'),
	  array(
	    'name' => 'crossingblock_year',
	    'cv_id' => variable_get('chado_stock_prop_types_cv', 'null')
	  )
	);
	$cb_season_cvterm = tripal_core_chado_select(
	  'cvterm',
	  array('cvterm_id'),
	  array(
	    'name' => 'crossingblock_season',
	    'cv_id' => variable_get('chado_stock_prop_types_cv', 'null')
	  )
	);

	// Count the number of progeny
	$query = "SELECT count(*) as count FROM stock stock "
						."LEFT JOIN organism organism ON stock.organism_id = organism.organism_id "
						."WHERE (organism.genus = '".$organism_genus."') "
						."AND (stock_id IN (SELECT stock_id FROM stockprop WHERE type_id=".$cb_year_cvterm[0]->cvterm_id." AND value='".$cb_year."')) "
						."AND (stock_id IN (SELECT stock_id FROM stockprop WHERE type_id=".$cb_season_cvterm[0]->cvterm_id." AND value='".$cb_season."'))";
	$previous_db = tripal_db_set_active('chado');
	$r = db_fetch_object(db_query($query));
	tripal_db_set_active($previous_db);

	// summary variables
	$num_progeny = $r->count;
	$progeny_view_link = l('more', 'Crossing_Block/'.$organism_genus.'/'.$cb_year.'/'.$cb_season.'/Progeny');
	$progeny_add_link = l('add', 'node/add/crosses');
	$output .= '<tr><th>Progeny</th><td>'.$num_progeny.' progeny ('.$progeny_view_link.', '.$progeny_add_link.')</td></tr>';
	$output .= '</table>';
	$output .= '<br />';


	return $output;
}

////////////////////////////////////////////////////////////////////////////
// @section crossing block form
// Purpose: The crossingblock allows the user to set the crossing block information
//   using the session so that it is stored between forms
////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_form()
 * Purpose: this form sets the crossing block using the SESSION
 *
 * @params form_state: form_state array as described for drupal form api
 * @return form: form array as described for drupal form api
 */
function set_crossing_block_form($form_state) {
  $form = array();

		// Crossing Block Season
		if (!empty($_SESSION['crossingblock_season'])) { $default = $_SESSION['crossingblock_season']; }
    else { $default = '---'; }

    $form['crossblock']['season'] = array(
      '#type' => 'select',
      '#title' => t('Season'),
      '#options' => array(
                 '---' => '---',
                 'Spring' => 'Spring',
                 'Summer' => 'Summer',
                 'Fall' => 'Fall',
                 'Winter' => 'Winter'
        ),
      '#default_value' => $default,
      '#required'   => TRUE
    );

		// Crossing Block Year
		$current_year = date('Y');
    $years_range = range(1972, $current_year+5, 1);
    $years_range['---'] = '---';

    foreach ($years_range as $k => $v) { $years_opt[$v] = $v; }
    if (!empty($_SESSION['crossingblock_year'])) { $default = $_SESSION['crossingblock_year']; }
    else { $default = '---'; }

    $form['crossblock']['year'] = array(
      '#type' => 'select',
      '#title' => t('Year'),
      '#options' => $years_opt,
      '#default_value' => $default,
      '#required'   => TRUE
    );

		// Crossing Block Organism
		$stock_organisms = tripal_core_chado_select(
		  'organism',
		  array('organism_id', 'abbreviation'),
		  array()
		);
		$stock_organism_options = array();
		$stock_organism_options[0] = 'Select An Organism';
		foreach ($stock_organisms as $o) {
		  $stock_organism_options[$o->organism_id] = $o->abbreviation;
		}

    if (!empty($form_state['values']['organism'])) { $organism_default = $form_state['values']['organism']; }
    elseif (!empty($_SESSION['organism_id'])) { $organism_default = $_SESSION['organism_id']; }
    else { $organism_default = 0; }

    $form['crossblock']['organism'] = array(
      '#type' => 'select',
      '#title' => t('Source Organism'),
      '#default_value' => $organism_default,
      '#options' => $stock_organism_options,
      '#required'   => TRUE,
    );

    $form['crossblock']['message'] = array(
      '#type' => 'item',
      '#value' => t('Please ensure to Set the Organism (by selecting a source organism above and clicking the Set Organism button) before entering any crosses. All of the parents available for selection depend on the organism selected here.')
    );

    $form['crossblock']['submit-set_organism'] = array(
      '#type' => 'submit',
      '#value' => 'Set Organism',
    );

    $form['crossblock']['submit-goto_crossblock'] = array(
      '#type' => 'submit',
      '#value' => 'Go to Crossing Block Summary',
    );

  return $form;
}

/**
 * Implements hook_form_submit
 * Purpose: To set the session variables
 *
 * @params form: form array as described for drupal form api
 * @params form_state: form_state array as described for drupal form api
 */
function set_crossing_block_form_submit($form, $form_state) {

  $_SESSION['crossingblock_year'] = $form_state['values']['year'];
  $_SESSION['crossingblock_season'] = $form_state['values']['season'];
  $_SESSION['organism_id'] = $form_state['values']['organism'];

  if ($form_state['values']['op'] == 'Go to Crossing Block Summary') {
      $organism = tripal_core_chado_select(
  	  'organism',
  	  array('common_name'),
  	  array('organism_id'=>$_SESSION["organism_id"])
  	);
    $organism_common_name = preg_replace('/\s+/', '-', $organism[0]->common_name);
    drupal_goto('Crossing_Block/'.$organism_common_name.'/'.$_SESSION["crossingblock_year"].'/'.$_SESSION["crossingblock_season"].'/Summary');
  }

}

/**
 * Implements theme_form()
 * Purpose: Provide themeing for crossing_block_form
 *
 * @params form: the form to be themed
 * @return output: the html markup which is the rendered form
*/
function theme_set_crossing_block_form($form) {

  unset($form['crossblock']['organism']['#title']);
  $output = '<fieldset><legend>Set Crossing Block</legend>';
  $output .= drupal_render($form['crossblock']['message']);

  $output .= '<table>';
  $output .= '<tr>';
  $output .= '<td>Crossing Block</td>';
  $output .= '<td>'.drupal_render($form['crossblock']['year']).'</td>';
  $output .= '<td>'.drupal_render($form['crossblock']['season']).'</td>';
  $output .= '<td>'.drupal_render($form['crossblock']['submit-goto_crossblock']).'</td>';
  $output .= '</tr>';

  $output .= '<tr>';
  $output .= '<td>Organism</td>';
  $output .= '<td colspan="2">'.drupal_render($form['crossblock']['organism']).'</td>';
  $output .= '<td>'.drupal_render($form['crossblock']['submit-set_organism']).'</td>';
  $output .= '</tr>';

  $output .= '</table>';
  $output .= '</fieldset>';

  $output .= drupal_render($form);

  return $output;

}

////////////////////////////////////////////////////////////////////////////
// @section Crossing Block Summary
// Purpose: To provide a static link to access all crossing blocks and perform
//   a basic summary of then number of stocks in each
////////////////////////////////////////////////////////////////////////////

/**
 * Purpose: To provide a static link to access all crossing blocks and perform
 *   a basic summary of then number of stocks in each
 */
function all_crossing_block_summary_page() {
	$output = '';

	// get cvterm needed below
	$cvterm = tripal_core_chado_select(
	  'cvterm',
	  array('cvterm_id'),
	  array(
	    'name' => 'synonym',
	    'cv_id' => variable_get('chado_stock_prop_types_cv', 'null')
	  )
	);
  $synonym_id = $cvterm[0]->cvterm_id;
	$cvterm = tripal_core_chado_select(
	  'cvterm',
	  array('cvterm_id'),
	  array(
      'name' => 'crossingblock_season',
      'cv_id' => variable_get('chado_stock_prop_types_cv', 'null')
	  )
	);
  $cb_season_id = $cvterm[0]->cvterm_id;
	$cvterm = tripal_core_chado_select(
	  'cvterm',
	  array('cvterm_id'),
	  array(
	    'name' => 'crossingblock_year',
	    'cv_id' => variable_get('chado_stock_prop_types_cv', 'null')
	  )
	);
  $cb_year_id = $cvterm[0]->cvterm_id;

	// Get Organisms and their total counts-----------------------------------------------------------
	$output .= '<table>';
	$output .= '<tr><th>Species</th><th>Total Progeny</th><th>Total Parents</th></tr>';

	// get progeny numbers
	$query = "SELECT organism.genus, organism.species, organism.organism_id, count(stock.*) as count FROM stock "
										."LEFT JOIN organism organism ON organism.organism_id=stock.organism_id "
										."WHERE stock_id IN (SELECT stock_id FROM stockprop WHERE type_id=%d)"
										."GROUP BY organism.organism_id, organism.common_name ORDER BY organism.genus, organism.species";
	$previous_db = tripal_db_set_active('chado');
	$resource = db_query($query,$cb_season_id);
	tripal_db_set_active($previous_db);
	$organisms = array();
	while ($r = db_fetch_object($resource)) {
		$organisms[$r->genus . ' ' . $r->species]['progeny'] = $r->count;
		$organisms[$r->genus . ' ' . $r->species]['organism_id'] = $r->organism_id;
	}

	//get parent numbers
	$query = "SELECT organism.genus, organism.species, organism.organism_id, count(stock.*) as count FROM stock "
										."LEFT JOIN organism organism ON organism.organism_id=stock.organism_id "
										."WHERE stock_id IN (SELECT stock_id FROM stockprop WHERE type_id=%d AND value~'[WFS][mp]*[0-9]+-P[0-9]+') "
										."GROUP BY organism.organism_id, organism.common_name ORDER BY organism.genus, organism.species";
	$previous_db = tripal_db_set_active('chado');
	$resource = db_query($query, $synonym_id);
	tripal_db_set_active($previous_db);
	while ($r = db_fetch_object($resource)) {
		$organisms[$r->genus . ' ' . $r->species]['parents'] = $r->count;
		$organisms[$r->genus . ' ' . $r->species]['organism_id'] = $r->organism_id;
	}

	// output the organism summary table
	foreach ($organisms as $name => $organism) {
		$output .= '<tr><th>'.$name.'</th><td>'.$organism['progeny'].'</td><td>'.$organism['parents'].'</td></tr>';
	}
	$output .= '</table><br />';

	// ouput details for each organism----------------------------------------------------------------
	foreach ($organisms as $common_name => $organism) {

    $output .= '<br /><br /><div id="feature-references" class="tripal_feature-info-box">';
    $output .= '<div class="tripal_expandableBox"><h3>'.$common_name.'</h3></div>';
    $output .= '<div class="tripal_expandableBoxContent">';

		//Get Seasons & their total number of stocks
		$query = "SELECT stockprop.value as crossing_block_season, count(stockprop.stockprop_id) as count "
					."FROM stockprop WHERE stockprop.type_id=%d AND stock_id IN (SELECT stock_id FROM stock WHERE organism_id=%d) "
					."GROUP BY stockprop.value ORDER BY stockprop.value";
		$previous_db = tripal_db_set_active('chado');
		$resource = db_query($query, $cb_season_id, $organism['organism_id']);
		tripal_db_set_active($previous_db);
		$stock_numbers = array();
		$seasons = array();
		while ($s = db_fetch_object($resource)) {
			$seasons[$s->crossing_block_season] = $s->crossing_block_season;
			// Get Years and totals for progeny
			$query = "SELECT stockprop.value as crossing_block_year, count(stockprop.stockprop_id) as count FROM stockprop "
							."WHERE stockprop.type_id=%d AND stock_id IN (SELECT stock_id FROM stockprop WHERE type_id=%d AND value='%s') "
							."AND stock_id IN (SELECT stock_id FROM stock WHERE organism_id=%d) "
							."GROUP BY stockprop.value ORDER BY stockprop.value";
			$previous_db = tripal_db_set_active('chado');
			$resource_year = db_query($query, $cb_year_id, $cb_season_id, $s->crossing_block_season, $organism['organism_id']);
			tripal_db_set_active($previous_db);
			while ($y = db_fetch_object($resource_year)) {
				$stock_numbers[$y->crossing_block_year][$s->crossing_block_season]['progeny'] = $y->count;
			} //end of years
		}// end of seasons

		// get parent numbers
		$query = "SELECT substring(stockprop.value from '([WFS][mp]*)[0-9]+-P[0-9]+') as season, "
							."substring(stockprop.value from '[WFS][mp]*([0-9]+)-P[0-9]+') as year, "
							."count(*) as count FROM stockprop "
							."WHERE stockprop.type_id=%d AND value~'[WFS][mp]*[0-9]+-P[0-9]+' "
							."AND stock_id IN (SELECT stock_id FROM stock WHERE organism_id=%d) GROUP BY year, season";
		$previous_db = tripal_db_set_active('chado');
		$resource_parents = db_query($query, $synonym_id, $organism['organism_id']);
		tripal_db_set_active($previous_db);
		while ($p = db_fetch_object($resource_parents)) {
			switch($p->season) {
				case 'W':
					$seasons['Winter'] = 'Winter';
					$stock_numbers[$p->year]['Winter']['parents'] = $p->count;
					break;
				case 'Sp':
					$seasons['Spring'] = 'Spring';
					$stock_numbers[$p->year]['Spring']['parents'] = $p->count;
					break;
				case 'Sm':
					$seasons['Summer'] = 'Summer';
					$stock_numbers[$p->year]['Summer']['parents'] = $p->count;
					break;
				case 'F':
					$seasons['Fall'] = 'Fall';
					$stock_numbers[$p->year]['Fall']['parents'] = $p->count;
					break;
			}
		}// end of get parent numbers

		$output .= '<br /><table>';
		$output .= '<tr><th rowspan="2">Year</th><th colspan="3">'.implode('</th><th colspan="3">', $seasons).'</th></tr>';
		$output .= '<tr>'.str_repeat('<th>Summary</th><th>Parents</th><th>Progeny</th>', sizeof($seasons)).'</tr>';
		$output .= '<tr></tr>';
		foreach ($stock_numbers as $year => $numbers) {
			$output .= '<tr><td>'.$year.'</td>';
			foreach ($seasons as $season) {
			  preg_match('/(\w+) .*/', $common_name, $matches);
			  $genus = $matches[1];
				$output .= '<td>'.l('Link','Crossing_Block/'.$genus.'/'.$year.'/'.$season.'/Summary').'</td>';
				if (!empty($numbers[$season]['parents'])) {
					$output .= '<td>'.l($numbers[$season]['parents'], 'Crossing_Block/'.$genus.'/'.$year.'/'.$season.'/Parents').'</td>';
				} else { $output .= '<td></td>'; }
				if (!empty($numbers[$season]['progeny'])) {
					$output .= '<td>'.l($numbers[$season]['progeny'], 'Crossing_Block/'.$genus.'/'.$year.'/'.$season.'/Progeny').'</td>';
				} else { $output .= '<td></td>'; }
			}
			$output .= '</tr>';
		}

		$output .= '</table></div></div>';
	}

	return $output;
}


